"""Caching module for HTTP responses."""

import hashlib
import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Any

logger = logging.getLogger(__name__)

class ResponseCache:
    """Cache for HTTP responses."""
    
    def __init__(self, cache_dir: str = ".cache"):
        """
        Initialize the response cache.
        
        Args:
            cache_dir: Directory to store cached responses
        """
        self.cache_dir = Path(cache_dir)
        self.cache_dir.mkdir(exist_ok=True)
        
    def _generate_cache_key(self, method: str, path: str, query_string: str, headers: Dict) -> str:
        """
        Generate a unique cache key for a request.
        
        Args:
            method: HTTP method (GET, POST, etc.)
            path: Request path
            query_string: Query string from URL
            headers: Request headers
            
        Returns:
            MD5 hash string to use as cache key
        """
        # Only include relevant headers that affect caching
        cache_headers = {k.lower(): v for k, v in headers.items() 
                         if k.lower() in ('accept', 'accept-encoding', 'accept-language')}
        
        key_components = [
            method.upper(),
            path,
            query_string or '',
            json.dumps(cache_headers, sort_keys=True)
        ]
        
        key_str = "|".join(key_components)
        return hashlib.md5(key_str.encode()).hexdigest()
    
    def _get_cache_path(self, cache_key: str) -> Path:
        """
        Get the path to the cache file for a cache key.
        
        Args:
            cache_key: Cache key generated by _generate_cache_key
            
        Returns:
            Path object for the cache file
        """
        return self.cache_dir / f"{cache_key}.json"
    
    async def get(self, method: str, path: str, query_string: str, headers: Dict) -> Optional[Dict[str, Any]]:
        """
        Get a cached response for a request if available.
        
        Args:
            method: HTTP method
            path: Request path
            query_string: Query string from URL
            headers: Request headers
            
        Returns:
            Dict containing response data if cached, None otherwise
        """
        if method != 'GET':
            return None
            
        cache_key = self._generate_cache_key(method, path, query_string, headers)
        cache_path = self._get_cache_path(cache_key)
        
        if cache_path.exists():
            logger.info(f"Cache hit for {method} {path}")
            try:
                with open(cache_path, 'r') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"Error reading cache: {e}")
                
        logger.info(f"Cache miss for {method} {path}")
        return None
    
    async def store(self, method: str, path: str, query_string: str, 
                  request_headers: Dict, status: int, response_headers: Dict, 
                  content: bytes) -> None:
        """
        Cache a response.
        
        Args:
            method: HTTP method
            path: Request path
            query_string: Query string from URL
            request_headers: Original request headers
            status: Response status code
            response_headers: Response headers
            content: Response body content
        """
        if method != 'GET' or status >= 400:
            return
            
        cache_key = self._generate_cache_key(method, path, query_string, request_headers)
        cache_path = self._get_cache_path(cache_key)
        
        cache_data = {
            "path": path,
            "query": query_string,
            "method": method,
            "status": status,
            "headers": {k: v for k, v in response_headers.items()},
            "content": content.decode('utf-8', errors='replace'),
            "cached_at": datetime.now().isoformat(),
        }
        
        try:
            with open(cache_path, 'w') as f:
                json.dump(cache_data, f)
            logger.info(f"Cached response for {method} {path}")
        except Exception as e:
            logger.error(f"Error caching response: {e}") 